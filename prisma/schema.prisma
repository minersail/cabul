// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Profile table - references Supabase auth.users via UUID
model Profile {
  id           String    @id @db.Uuid // Supabase auth.users.id (UUID)
  email        String?   @unique
  isAdmin      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  lastAccessed DateTime?
  
  // Relations
  userConfig   UserConfig?
  userMetadata UserMetadata?
  lexicon      Lexicon[]
  mistakes     Mistake[]
  sessions     Session[]
  
  @@map("profiles")
}

// UserConfig table
model UserConfig {
  profileId     String  @id @db.Uuid
  articleSource String
  autoScroll    Boolean
  
  // Relations
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  @@map("user_config")
}

// UserMetadata table - 1:1 with Profile for exercise tracking
model UserMetadata {
  profileId    String @id @db.Uuid
  practiceIndex Int   @default(0)
  
  // Relations
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  @@map("user_metadata")
}

// WordFrequency table - Lexique dataset
model WordFrequency {
  text           String @id
  lemma          String
  pos_cgram      String
  frequency      Float
  frequency_lemma Float
  
  @@map("word_frequency")
}

// Lemma table
model Lemma {
  lemma String @id
  
  // Relations
  lexicon Lexicon[]
  
  @@map("lemmas")
}

// Lexicon table (composite primary key: profileId + lemma)
model Lexicon {
  profileId     String   @db.Uuid
  lemma         String
  seen          Int
  correct       Int
  firstSeen     DateTime @default(now())
  lastPracticed Int?     // practiceIndex when last used in exercise
  
  // Relations
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  lemmaRef  Lemma   @relation(fields: [lemma], references: [lemma], onDelete: Cascade)
  
  @@id([profileId, lemma])
  @@map("lexicon")
}



// Mistake table
model Mistake {
  mistakeId   Int      @id @default(autoincrement())
  profileId   String   @db.Uuid
  token       String   // Surface form text
  lemma       String   // Base form
  pos         String   // Part of speech
  sentence    String?
  translation String?  // Cached translation at mistake time
  createdAt   DateTime @default(now())
  
  // Relations
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  @@map("mistakes")
}

// Article table
model Article {
  id        Int      @id @default(autoincrement())
  title     String
  text      String   @db.Text
  source    String
  url       String
  author    String?
  createdAt DateTime @default(now())
  metadata  Json?
  
  // Relations
  sessions Session[]
  
  @@map("articles")
}

// Session table (composite primary key: profileId + articleid)
model Session {
  profileId     String  @db.Uuid
  articleid     Int
  furthestIndex Int
  currentIndex  Int
  
  // Relations
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleid], references: [id], onDelete: Cascade)
  
  @@id([profileId, articleid])
  @@map("sessions")
}
